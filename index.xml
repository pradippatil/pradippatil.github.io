<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>प्रदीप महादेव पाटील</title>
    <link>http://pradippatil.com/</link>
    <description>Recent content on प्रदीप महादेव पाटील</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 26 Feb 2017 15:22:10 -0500</lastBuildDate>
    
	<atom:link href="http://pradippatil.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Install Go on Raspberry Pi</title>
      <link>http://pradippatil.com/post/golang-on-rpi/</link>
      <pubDate>Sun, 26 Feb 2017 15:22:10 -0500</pubDate>
      
      <guid>http://pradippatil.com/post/golang-on-rpi/</guid>
      <description>Go Programming language is becoming popular in IoT sphere as well. I am very fascinated by Go powered robotics/IoT framework Gobot and planning to play with it using my RPi.
This post explains how to install Go on Raspberry Pi.
My RPi (2 Model B) shows it has ARMv7 processor.
$ uname -m armv7l  Go&amp;rsquo;s current stable version 1.8 has official ARMv6 build available for download
Since ARMv7 compatible CPU can execute ARMv6 code, let&amp;rsquo;s download Go 1.</description>
    </item>
    
    <item>
      <title>Headless mode of Raspberry Pi</title>
      <link>http://pradippatil.com/post/raspberrypi-headless/</link>
      <pubDate>Fri, 17 Feb 2017 22:15:38 -0500</pubDate>
      
      <guid>http://pradippatil.com/post/raspberrypi-headless/</guid>
      <description>This post explains how to configure Raspberry Pi for headless mode (with no monitor and keyboard/mouse of its own).

Things we need  Raspberry Pi SD / microSD card (4GB+) USB WiFi adapter (Not required for Raspberry Pi 3 which has WiFi inbuilt) USB power cable A computer with Linux, macOS or Windows (for burning OS image to SD / microSD and remote connection) Internet connection</description>
    </item>
    
    <item>
      <title>Configuration management in Go (using Viper)</title>
      <link>http://pradippatil.com/post/viper/</link>
      <pubDate>Sat, 14 Jan 2017 23:19:36 -0500</pubDate>
      
      <guid>http://pradippatil.com/post/viper/</guid>
      <description>Config factor from The Twelve-Factor App states that application&amp;rsquo;s configuration should be isolated from code to make configuring an app for different environments very convenient and scaling it up a breeze.
Configuration management for modern applications which run on so many different environment is becoming complex with advent of microservices and cloud computing. Not to mention dealing with several formats/markup languages to store app&amp;rsquo;s configurations.
This post is about one of my favorite Go libraries Viper which claims to be a complete configuration solution for Go applications.</description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>http://pradippatil.com/projects/</link>
      <pubDate>Sun, 18 Dec 2016 18:32:42 -0500</pubDate>
      
      <guid>http://pradippatil.com/projects/</guid>
      <description>terminal-clock - Terminal clock using Go
 awesome-go-resources - Curated list of awesome Go resources on web
 hackerrank - My solutions (in Go) to problems on hackerrank
 exercism - My solutions (in Go) to problems on exercism.io
 [techinterview](https://github.com/pradippatil/techinterview) - My study guide for tech interviews --</description>
    </item>
    
    <item>
      <title>Build a version controlled blog using Hugo, GitHub and Drone.io</title>
      <link>http://pradippatil.com/post/how-to-hugo/</link>
      <pubDate>Wed, 20 Jul 2016 22:04:05 -0400</pubDate>
      
      <guid>http://pradippatil.com/post/how-to-hugo/</guid>
      <description>http://xkcd.com/741/ Content Management Systems nowdays are relatively easy to setup and install but usually overkill for static websites like many of the personal blogs. I prefer an alternative, Hugo to generate static site, GitHub Pages for version control and hosting, and Drone.io for auto deployment.
Read below to find out how one can build a static blog/website blazingly fast using these tools.
1. Build a static blog locally Static web pages are delivered to user exactly as stored unlike dynamic web pages which include web server processing for every request, for example, getting data from database, embedding it in configured templates and generating a HTML page to deliver to user.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://pradippatil.com/license/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pradippatil.com/license/</guid>
      <description>The MIT License (MIT) Copyright (c) 2016 Pradip Patil Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &amp;quot;Software&amp;quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</description>
    </item>
    
  </channel>
</rss>