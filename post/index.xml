<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Post-rsses on Pradip Mahadev Patil</title>
    <link>https://pradippatil.github.io/post/index.xml</link>
    <description>Recent content in Post-rsses on Pradip Mahadev Patil</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Sun, 26 Feb 2017 15:22:10 -0500</lastBuildDate>
    <atom:link href="https://pradippatil.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Install Go on Raspberry Pi</title>
      <link>https://pradippatil.github.io/post/golang-on-rpi/</link>
      <pubDate>Sun, 26 Feb 2017 15:22:10 -0500</pubDate>
      
      <guid>https://pradippatil.github.io/post/golang-on-rpi/</guid>
      <description>&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34;&gt;Go Programming language&lt;/a&gt; is becoming popular in IoT sphere as well.
I am very fascinated by Go powered robotics/IoT framework &lt;a href=&#34;https://gobot.io/&#34;&gt;Gobot&lt;/a&gt; and planning to play with it using my &lt;a href=&#34;https://pradippatil.github.io/post/raspberrypi-headless&#34;&gt;RPi&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This post explains how to install Go on Raspberry Pi.&lt;/p&gt;

&lt;p&gt;My RPi &lt;code&gt;(2 Model B)&lt;/code&gt; shows it has ARMv7 processor.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;$ uname -m
armv7l
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go&amp;rsquo;s current stable version 1.8 has official ARMv6 build available for &lt;a href=&#34;https://golang.org/dl/&#34;&gt;download&lt;/a&gt;&lt;br /&gt;
Since ARMv7 compatible CPU can execute ARMv6 code, let&amp;rsquo;s download Go 1.8 ARMv6 build and &lt;a href=&#34;https://golang.org/doc/install&#34;&gt;install&lt;/a&gt; it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://pradippatil.github.io/img/go-armv6.png&#34; alt=&#34;download go&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Download archive
$ wget https://storage.googleapis.com/golang/go1.8.linux-armv6l.tar.gz 

# Extract it into /usr/local. It will create a Go tree in /usr/local/go
$ sudo tar -C /usr/local -xzf go1.8.linux-armv6l.tar.gz 

# Add /usr/local/go/bin to the PATH environment variable. 
# You can do this by adding a line to your /etc/profile 
# (for a system-wide installation) or $HOME/.profile as shown below
$ echo &#39;export PATH=$PATH:/usr/local/go/bin&#39; &amp;gt;&amp;gt; $HOME/.profile 

# Above PATH setting will work when we re-login. Export it in current session as well.
$ export PATH=$PATH:/usr/local/go/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If all above steps worked fine, you will be able to execute &lt;code&gt;go&lt;/code&gt; commands. Let&amp;rsquo;s check version.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go version
go version go1.8 linux/arm 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sweet!&lt;br /&gt;
Now follow &lt;a href=&#34;https://golang.org/doc/install#testing&#34;&gt;this guide&lt;/a&gt; to test the new installation by building &amp;lsquo;Hello World!&amp;rsquo; program.&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Headless mode of Raspberry Pi</title>
      <link>https://pradippatil.github.io/post/raspberrypi-headless/</link>
      <pubDate>Fri, 17 Feb 2017 22:15:38 -0500</pubDate>
      
      <guid>https://pradippatil.github.io/post/raspberrypi-headless/</guid>
      <description>

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;This post explains how to configure &lt;a href=&#34;https://www.raspberrypi.org/products/&#34;&gt;Raspberry Pi&lt;/a&gt; for headless mode (with no monitor and keyboard/mouse of its own).&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;h3 id=&#34;things-we-need&#34;&gt;Things we need&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Raspberry Pi&lt;/li&gt;
&lt;li&gt;SD / microSD card (4GB+)&lt;/li&gt;
&lt;li&gt;USB WiFi adapter (Not required for Raspberry Pi 3 which has WiFi inbuilt)&lt;/li&gt;
&lt;li&gt;USB power cable&lt;/li&gt;
&lt;li&gt;A computer with Linux, macOS or Windows (for burning OS image to SD / microSD and remote connection)&lt;/li&gt;
&lt;li&gt;Internet connection&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://pradippatil.github.io/img/rpi_components.png&#34; alt=&#34;Components&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;h3 id=&#34;download-os-image-for-raspberry-pi&#34;&gt;Download OS image for Raspberry Pi&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Raspbian&lt;/strong&gt; is the Foundation’s official supported operating system which comes in 2 flavours:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;RASPBIAN JESSIE WITH PIXEL&lt;/code&gt; - Full image which includes a new desktop environment called PIXEL (Pi Improved Xwindows Environment Lightweight) and many pre-installed applications.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RASPBIAN JESSIE LITE&lt;/code&gt; - Minimal image which doesn&amp;rsquo;t include desktop environment and includes core packages. &lt;em&gt;Ideal for headless mode&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let&amp;rsquo;s use minimal version &lt;code&gt;RASPBIAN JESSIE LITE&lt;/code&gt;.&lt;br /&gt;
Download from : &lt;a href=&#34;https://www.raspberrypi.org/downloads/raspbian/&#34;&gt;https://www.raspberrypi.org/downloads/raspbian/&lt;/a&gt; and extract it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://pradippatil.github.io/img/raspbian.png&#34; alt=&#34;Raspbian&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;h3 id=&#34;install-raspbian-image-on-sd-microsd&#34;&gt;Install Raspbian image on SD / microSD&lt;/h3&gt;

&lt;p&gt;(I am doing this on my Ubuntu laptop. Check &lt;a href=&#34;http://elinux.org/RPi_Easy_SD_Card_Setup&#34;&gt;this url&lt;/a&gt; for other OS/methods)&lt;/p&gt;

&lt;p&gt;Insert SD/microSD into computer using USB Card reader or SD card slot and burn Raspbian Lite image using &lt;a href=&#34;https://apps.ubuntu.com/cat/applications/precise/usb-imagewriter/&#34;&gt;ImageWriter&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install usb-imagewriter # install ImageWriter if you don&#39;t have it 
sudo imagewriter
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://pradippatil.github.io/img/imagewriter_0.png&#34; alt=&#34;ImageWriter&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After successful completion Raspbian should be ready to use.&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;h3 id=&#34;enable-ssh-in-newly-installed-raspbian&#34;&gt;Enable SSH in newly installed Raspbian&lt;/h3&gt;

&lt;p&gt;SSH is disabled by default in Raspbian. To enable it create an empty file with name &amp;ldquo;ssh&amp;rdquo; in &lt;em&gt;boot&lt;/em&gt; partition&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;% cd /path/to/sd/card/boot # note that we have to create it in boot 
% cat /dev/null &amp;gt; ssh  # blank file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;h3 id=&#34;configure-wifi-connection&#34;&gt;Configure WiFi connection&lt;/h3&gt;

&lt;p&gt;Edit &lt;code&gt;wpa_supplicant.conf&lt;/code&gt; configuration file from sd card using root access&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;% cd /path/to/sd/card/
% sudo vim etc/wpa_supplicant/wpa_supplicant.conf # use sudo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And put your wifi credentials in below format at the end&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;network={
    ssid=&amp;quot;your_wifi_ssid&amp;quot;
    psk=&amp;quot;your_wifi_password&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save file and exit.&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;h3 id=&#34;access-raspberry-pi-remotely-over-wifi-using-ssh&#34;&gt;Access Raspberry Pi remotely over WiFi (using SSH)&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ve already enabled SSH and WiFi on Raspbian so that we can access it remotely from computer.&lt;br /&gt;
Insert SD/microSD card in Raspberry Pi.
Make sure WiFi adapter is plugged in (not required for Raspberry Pi 3) and plug the power cable.
While booting up, it&amp;rsquo;ll connect to your local network over WiFi with given credentials in previous step.&lt;/p&gt;

&lt;p&gt;In order to connect to your Raspberry Pi using SSH we need to know the Pi&amp;rsquo;s IP address.
Thanks to &lt;a href=&#34;https://en.wikipedia.org/wiki/Avahi_(software)&#34;&gt;Avahi&lt;/a&gt; auto service discovery implementation which is installed by default on debian and ubuntu systems, we can use &lt;code&gt;raspberrypi.local&lt;/code&gt; to address our Raspberry Pi (without worrying about it&amp;rsquo;s IP which can be changed by DHCP every time we will reboot/reconnect)&lt;/p&gt;

&lt;p&gt;Default login credentials for Raspbian are:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;username: pi
password: raspberry
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open terminal (use &lt;a href=&#34;http://www.putty.org/&#34;&gt;PuTTY&lt;/a&gt; on Windows) and ssh using user &lt;code&gt;pi&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh pi@raspberrypi.local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After entering password succesfully it will land you in Raspberry Pi.
Let’s update it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it. You can now access your RPi with any device having a utility to SSH. Here&amp;rsquo;s my RPi with phone as head.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://pradippatil.github.io/img/rpi_final.png&#34; alt=&#34;myRPi&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Next section describes some more interesting things you can to do with your RPi. &lt;strong&gt;Have a hap&lt;code&gt;Pi&lt;/code&gt; journey! :)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;h4 id=&#34;further-reading&#34;&gt;Further reading:&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;In case you are not able ssh using &lt;code&gt;raspberrypi.local&lt;/code&gt;, find Pi&amp;rsquo;s IP address and use it instead. Check &lt;a href=&#34;https://www.raspberrypi.org/documentation/remote-access/ip-address.md&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Use &lt;a href=&#34;https://www.raspberrypi.org/documentation/configuration/raspi-config.md&#34;&gt;raspi-config&lt;/a&gt; - Raspberry Pi configuration tool in Raspbian that allows you to easily enable features such as the camera, and change your specific settings such as keyboard layout.&lt;/li&gt;
&lt;li&gt;Setup &lt;a href=&#34;http://www.raspberry-pi-geek.com/Archive/2015/09/Making-your-projects-more-reliable&#34;&gt;Watchdog&lt;/a&gt; which automatically restarts RPi if it becomes unresponsive - helpful to make your projects more reliable.&lt;/li&gt;
&lt;li&gt;Install &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-protect-ssh-with-fail2ban-on-ubuntu-14-04&#34;&gt;Fail2ban&lt;/a&gt; which bans IPs that show the malicious signs of incorrect authentications attempts.&lt;/li&gt;
&lt;li&gt;Although Raspbian Lite doesn&amp;rsquo;t include GUI by default, we can easily install one and access Raspbian via GUI. Follow this guide - &lt;a href=&#34;https://www.raspberrypi.org/forums/viewtopic.php?f=66&amp;amp;t=133691&#34;&gt;Raspbian Lite with PIXEL/LXDE/XFCE/MATE/Openbox GUI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Access Raspberry Pi over &lt;a href=&#34;https://www.raspberrypi.org/documentation/remote-access/vnc/&#34;&gt;VNC&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Configuration management in Go (using Viper)</title>
      <link>https://pradippatil.github.io/post/viper/</link>
      <pubDate>Sat, 14 Jan 2017 23:19:36 -0500</pubDate>
      
      <guid>https://pradippatil.github.io/post/viper/</guid>
      <description>

&lt;p&gt;&lt;/br&gt;
&lt;code&gt;Config&lt;/code&gt; factor from &lt;a href=&#34;https://12factor.net/config&#34;&gt;The Twelve-Factor App&lt;/a&gt; states that application&amp;rsquo;s configuration should be
isolated from code to make configuring an app for different environments very convenient and scaling it up a breeze.&lt;/p&gt;

&lt;p&gt;Configuration management for modern applications which run on so many different environment is becoming complex with advent of microservices and cloud computing.
Not to mention dealing with several formats/markup languages to store app&amp;rsquo;s configurations.&lt;/p&gt;

&lt;p&gt;This post is about one of my favorite &lt;em&gt;Go&lt;/em&gt; libraries &lt;a href=&#34;https://github.com/spf13/viper&#34;&gt;Viper&lt;/a&gt; which claims to be a complete configuration solution for &lt;em&gt;Go&lt;/em&gt; applications. Among other features, it supports (as of this writing) reading configuration from&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JSON, TOML, YAML, HCL, and Java properties config files&lt;/li&gt;
&lt;li&gt;Environment variables&lt;/li&gt;
&lt;li&gt;Commandline flags&lt;/li&gt;
&lt;li&gt;Remote config systems (etcd or Consul)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s see how to use Viper to take advantage of some of these features.&lt;/p&gt;

&lt;h2 id=&#34;install-viper&#34;&gt;Install Viper&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get github.com/spf13/viper
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;read-from-config-file&#34;&gt;Read from config file&lt;/h2&gt;

&lt;p&gt;While it supports various file formats, we&amp;rsquo;ll use an example JSON configuration below.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/config/env.json&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JSON&#34;&gt;{
    &amp;quot;prod&amp;quot;: {
        &amp;quot;host&amp;quot;: &amp;quot;192.168.1.1&amp;quot;,
        &amp;quot;port&amp;quot;: &amp;quot;8081&amp;quot;,
        &amp;quot;enabled&amp;quot;: true
    },
    &amp;quot;dev&amp;quot;: {
        &amp;quot;host&amp;quot;: &amp;quot;192.168.1.2&amp;quot;,
        &amp;quot;port&amp;quot;: &amp;quot;8082&amp;quot;,
        &amp;quot;enabled&amp;quot;: true
    },
    &amp;quot;qa&amp;quot;: {
        &amp;quot;host&amp;quot;: &amp;quot;192.168.1.3&amp;quot;,
        &amp;quot;port&amp;quot;: &amp;quot;8083&amp;quot;,
        &amp;quot;enabled&amp;quot;: true
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: Viper does not require any initialization before using, unless we&amp;rsquo;ll be dealing multiple different configurations.
check &lt;a href=&#34;https://github.com/spf13/viper#working-with-multiple-vipers&#34;&gt;working with multiple vipers&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;set-config-file-we-want-to-read&#34;&gt;Set config file we want to read.&lt;/h3&gt;

&lt;p&gt;There are 2 ways to do this.&lt;br /&gt;
Set path including config file name and extension&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;viper.SetConfigFile(&amp;quot;./configs/env.json&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Or&lt;/strong&gt; Set path(s) to loook for config files in.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;
// Add paths. Accepts multiple paths. It will search these paths in given order
viper.AddConfigPath(&amp;quot;./configs&amp;quot;)
viper.AddConfigPath(&amp;quot;$HOME/configs&amp;quot;)
// And then register config file name (no extension)
viper.SetConfigName(&amp;quot;env&amp;quot;)
// Optionally we can set specific config type
// viper.SetConfigType(&amp;quot;json&amp;quot;)

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;read-the-config-file-in-viper&#34;&gt;Read the config file in &lt;code&gt;viper&lt;/code&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;
// Searches for config file in given paths and read it
if err := viper.ReadInConfig(); err != nil {
    log.Fatalf(&amp;quot;Error reading config file, %s&amp;quot;, err)
}

// Confirm which config file is used
fmt.Printf(&amp;quot;Using config: %s\n&amp;quot;, viper.ConfigFileUsed())

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;get-values-from-viper&#34;&gt;Get values from &lt;code&gt;viper&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://godoc.org/github.com/spf13/viper#Get&#34;&gt;Get&lt;/a&gt; method
can retrieve any value given the key (case-insensitive) to use.
Get returns an interface. For a specific value use one of the Get____ methods (e.g. GetInt, GetBool etc)&lt;/p&gt;

&lt;!-- TODO Get has the behavior of returning the value associated with the first place from where it is set.
Viper will check in the following order: override, flag, env, config file, key/value store, default
--&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;
port := viper.Get(&amp;quot;prod.port&amp;quot;) // returns string 
//port := viper.GetInt(&amp;quot;prod.port&amp;quot;) // returns integer
fmt.Printf(&amp;quot;Value: %v, Type: %T\n&amp;quot;, port, port)

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;check-if-a-particular-key-is-set-using-isset&#34;&gt;Check if a particular key is set using &lt;code&gt;IsSet&lt;/code&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;
if !viper.IsSet(&amp;quot;prod.port&amp;quot;) {
    log.Fatal(&amp;quot;missing port number&amp;quot;)
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that we can trverse nested configuration using a &lt;code&gt;.&lt;/code&gt; delimited path  e.g. prod.port&lt;/p&gt;

&lt;h3 id=&#34;read-values-in-struct&#34;&gt;Read values in &lt;code&gt;struct&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Instead of reading keys one by one we can extract sub-tree using &lt;code&gt;Sub&lt;/code&gt; and decode it in struct using &lt;code&gt;Unmarshal&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;
prod := viper.Sub(&amp;quot;prod&amp;quot;)

// Unmarshal into struct. Struct fields should match keys from config (case in-sensitive)
type config struct {
    Host    string
    Port    int
    enabled bool
}

var C config

err := prod.Unmarshal(&amp;amp;C)
if err != nil {
    log.Fatalf(&amp;quot;unable to decode into struct, %v&amp;quot;, err)
}
fmt.Println(C.Host)

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;read-from-env-variables-todo&#34;&gt;Read from Env variables [TODO]&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;You can find full source of this example in &lt;a href=&#34;https://github.com/pradippatil/tutorials/tree/master/viper&#34;&gt;github repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This post gives just a glimpse of Viper&amp;rsquo;s capabilities. It&amp;rsquo;s worth exploring some of the interesting things it offers like,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/viper#watching-and-re-reading-config-files&#34;&gt;Watching and re-reading config files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/viper#reading-config-from-ioreader&#34;&gt;Reading from buffer/ioreader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/viper#remote-keyvalue-store-support&#34;&gt;Reading from remote key value store&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/viper#registering-and-using-aliases&#34;&gt;Alias for values&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Build a version controlled blog using Hugo, GitHub and Drone.io</title>
      <link>https://pradippatil.github.io/post/how-to-hugo/</link>
      <pubDate>Wed, 20 Jul 2016 22:04:05 -0400</pubDate>
      
      <guid>https://pradippatil.github.io/post/how-to-hugo/</guid>
      <description>

&lt;hr /&gt;

&lt;p&gt;&lt;div align=&#34;center&#34;&gt;&lt;a href=&#34;http://xkcd.com/741/&#34;&gt;http://xkcd.com/741/&lt;/a&gt;&lt;/div&gt;
&lt;p align=&#34;center&#34;&gt;
  &lt;img src=&#34;http://imgs.xkcd.com/comics/blogging.png&#34; /&gt;
&lt;/p&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;C&lt;/strong&gt;ontent &lt;strong&gt;M&lt;/strong&gt;anagement &lt;strong&gt;S&lt;/strong&gt;ystems nowdays are relatively easy to setup and install but usually overkill for static websites like many of the personal blogs.
I prefer an alternative, &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; to generate static site, &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt;
for version control and hosting, and &lt;a href=&#34;https://drone.io/&#34;&gt;Drone.io&lt;/a&gt; for auto deployment.&lt;/p&gt;

&lt;p&gt;Read below to find out how one can build a static blog/website blazingly fast using these tools.&lt;/p&gt;

&lt;h3 id=&#34;1-build-a-static-blog-locally&#34;&gt;1. Build a static blog locally&lt;/h3&gt;

&lt;p&gt;Static web pages are delivered to user exactly as stored unlike dynamic web pages which include web server processing for every request,
   for example, getting data from database, embedding it in configured templates  and generating a HTML page to deliver to user. Absense of such
   processing makes static websites faster and more reliable.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a very good &lt;a href=&#34;https://davidwalsh.name/introduction-static-site-generators&#34;&gt;introduction to static site generators&lt;/a&gt;.&lt;br /&gt;
   Also, read &lt;a href=&#34;https://www.smashingmagazine.com/2015/11/modern-static-website-generators-next-big-thing/&#34;&gt;why static website generators are the next big thing&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are &lt;a href=&#34;https://staticsitegenerators.net/&#34;&gt;several&lt;/a&gt; static site generators today. I like &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;
   which is written in Go (we don&amp;rsquo;t need to know Go programming to use it). Let&amp;rsquo;s build a blog from scratch using Hugo.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Install Hugo from &lt;em&gt;Downloads&lt;/em&gt; section of &lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;latest release&lt;/a&gt;. Successful installation will
enable &lt;em&gt;hugo&lt;/em&gt; command. Try below to check version.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo version 
Hugo Static Site Generator v0.16 BuildDate: 2016-06-12T07:00:35-04:00
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a blog in your home directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd $HOME 
$ hugo new site myblog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It will create a directory &lt;em&gt;myblog&lt;/em&gt; with below structure.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;myblog
|-- archetypes
|-- config.toml
|-- content
|-- data
|-- layouts
|-- static
`-- themes
6 directories, 1 file
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Write first post.&lt;br /&gt;
Hugo natively supports &lt;a href=&#34;https://en.wikipedia.org/wiki/Markdown&#34;&gt;Markdown&lt;/a&gt;, which is super easy format to write our blog posts.
Create a post using below command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd myblog
$ hugo new post/first.md
/home/pradip/myblog/content/post/first.md created
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It puts all our posts in &lt;em&gt;content&lt;/em&gt; directory (created &lt;em&gt;post&lt;/em&gt; directory since we used it in command).
Hugo uses &lt;a href=&#34;https://github.com/toml-lang/toml&#34;&gt;TOML&lt;/a&gt; as default language for configuration and post&amp;rsquo;s metadata aka &lt;em&gt;front matter&lt;/em&gt; (supports YAML, JSON as well).
For example, it added &lt;em&gt;date&lt;/em&gt;, &lt;em&gt;draft&lt;/em&gt; and &lt;em&gt;title&lt;/em&gt; tags in front matter for first post we just created.
We can create custom front matter by &lt;a href=&#34;http://gohugo.io/content/archetypes/&#34;&gt;creating an archetype&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat /home/pradip/myblog/content/post/first.md
+++
date = &amp;quot;2016-07-23T19:46:34-04:00&amp;quot;
draft = true
title = &amp;quot;first&amp;quot;

+++
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s add some content to our post, say &lt;code&gt;Hello, World !&lt;/code&gt; after &lt;code&gt;+++&lt;/code&gt; at end.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add a theme&lt;br /&gt;
Hugo has many &lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;themes&lt;/a&gt; ready to use. We will use &lt;em&gt;hugo-uno&lt;/em&gt;. Clone it&amp;rsquo;s git repository in &lt;em&gt;themes&lt;/em&gt; directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/fredrikloch/hugo-uno.git themes/hugo-uno
Cloning into &#39;themes/hugo-uno&#39;...
remote: Counting objects: 517, done.
remote: Total 517 (delta 0), reused 0 (delta 0), pack-reused 517
Receiving objects: 100% (517/517), 3.75 MiB | 2.21 MiB/s, done.
Resolving deltas: 100% (249/249), done.
Checking connectivity... done.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Update configuration&lt;br /&gt;
&lt;em&gt;config.toml&lt;/em&gt; contains configuration for our site which can be overridden as we need. Default configuration looks like,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat config.toml 
baseurl = &amp;quot;http://replace-this-with-your-hugo-site.com/&amp;quot;
languageCode = &amp;quot;en-us&amp;quot;
title = &amp;quot;My New Hugo Site&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add theme name at end &lt;code&gt;theme = &amp;quot;hugo-uno&amp;quot;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Generate static site&lt;br /&gt;
As we are ready with configuration and our first post, let&amp;rsquo;s generate site and see how does it look.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo --buildDrafts 
Started building site
1 of 1 draft rendered
0 future content
1 pages created
0 non-page files copied
0 paginator pages created
0 tags created
0 categories created
in 86 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;--buildDrafts&lt;/code&gt; is needed to compile draft posts (i.e. posts which have &lt;code&gt;draft = &#39;true&#39;&lt;/code&gt; in their front matter).
It generates our site and puts it &lt;em&gt;public&lt;/em&gt; directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;myblog
|-- archetypes
|-- config.toml
|-- content
|-- data
|-- layouts
|-- public
|-- static
`-- themes

7 directories, 1 file
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Preview our blog on local machine&lt;br /&gt;
Hugo provides its own webserver which builds and serves the site. Let&amp;rsquo;s start server for our blog by executing below commnd in &lt;em&gt;myblog&lt;/em&gt; directory. by executing below command in &lt;em&gt;myblog&lt;/em&gt; directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo server
Started building site
0 draft content
0 future content
1 pages created
0 non-page files copied
7 paginator pages created
3 tags created
2 categories created
in 63 ms
Watching for changes in /home/pradip/github/myblog/{data,content,layouts,static,themes}
Serving pages from memory
Web Server is available at http://localhost:1313/ (bind address 127.0.0.1)
Press Ctrl+C to stop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, open &lt;a href=&#34;http://localhost:1313/&#34;&gt;http://localhost:1313/&lt;/a&gt; in your browser to find your blog up and running. If you make any changes to your posts
while server is running, it detects the changes and reloads browser to show the changes - very handy to preview your
changes real-time.&lt;/p&gt;

&lt;p&gt;You can now customize blog&amp;rsquo;s features and styling further as you wish. Read &lt;a href=&#34;http://gohugo.io/themes/overview/&#34;&gt;hugo theme docs&lt;/a&gt; for more details.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-host-your-blog-on-github&#34;&gt;2. Host your blog on GitHub&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s host our little blog so that we can access it on interweb. GitHub lets us host a site directly from a special repository. Head over to &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; and
  create a new repository named &lt;em&gt;username.github.io&lt;/em&gt;, where username is your user name on GitHub.&lt;br /&gt;
  &lt;em&gt;If the first part of the repository doesn’t exactly match your username, it won’t work, so make sure to get it right.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We will put our hugo generated blog (i.e. only contents of &lt;em&gt;public&lt;/em&gt; directory from &lt;em&gt;myblog&lt;/em&gt; directory) in &lt;em&gt;username.github.io&lt;/em&gt;.
  Make sure to replace &lt;em&gt;username&lt;/em&gt; with your GitHub user name in below commands.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd $HOME
$ git clone https://github.com/username/username.github.io.git
$ cp -r myblog/public/* username.github.io/
$ cd username.github.io
$ git add --all
$ git commit -m&#39;first version&#39;
$ git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will see contents of &lt;em&gt;public&lt;/em&gt; directory in your GitHub repository now. Open &lt;a href=&#34;https://username.github.io&#34;&gt;https://username.github.io&lt;/a&gt; to see your blog live. Hurrah!&lt;/p&gt;

&lt;h3 id=&#34;3-auto-deploy-your-blog-with-drone-io&#34;&gt;3. Auto deploy your blog with Drone.io&lt;/h3&gt;

&lt;p&gt;We have our blog live!. What next? We will keep adding contents to this blog. For every change in blog which we want to make live,
  we need to re-generate static site using hugo and push it to &lt;em&gt;username.github.io&lt;/em&gt;. Doing it manually every time is no fun. That&amp;rsquo;s where
  we call &lt;strong&gt;C&lt;/strong&gt;ontinuous &lt;strong&gt;I&lt;/strong&gt;ntegration services to the rescue.&lt;/p&gt;

&lt;p&gt;There are &lt;a href=&#34;https://en.wikipedia.org/wiki/Comparison_of_continuous_integration_software&#34;&gt;several CI tools&lt;/a&gt; today,
  I chose Drone.io as it needs minimal configuration to get the work done. Also it allows us unlimited builds for unlimited public repositories.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Add source code to a new GitHub repository&lt;br /&gt;
Create a new GitHub repository with same name as our created blog i.e. &lt;em&gt;myblog&lt;/em&gt;
Source code needed for Hugo to build our blog is everything except &lt;em&gt;public&lt;/em&gt; directory. So no need to upload &lt;em&gt;public&lt;/em&gt; directory to &lt;em&gt;myblog&lt;/em&gt; repository.
Let&amp;rsquo;s put it in &lt;em&gt;.gitignore&lt;/em&gt; file (git ignores files/directories matching patterns in this file).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ echo &amp;quot;./public&amp;quot; &amp;gt; .gitignore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, we have cloned &lt;em&gt;hugo-uno&lt;/em&gt; theme from external repository. Let&amp;rsquo;s link that repository as submodule instead of uploading whole theme
in our repository.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git submodule add https://github.com/SenjinDarashiva/hugo-uno themes/hugo-uno
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will create &lt;em&gt;.gitmodules&lt;/em&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat .gitmodules
[submodule &amp;quot;themes/hugo-uno&amp;quot;]
path = themes/hugo-uno
url = https://github.com/SenjinDarashiva/hugo-uno
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;rsquo;re ready to populate &lt;em&gt;myblog&lt;/em&gt; repository.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ git add --all
 $ git commit -m&#39;committing source&#39;
 $ git remote add origin https://github.com/username/myblog.git
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create build script:&lt;br /&gt;
Copy my build script &lt;em&gt;deploy.sh&lt;/em&gt; in &lt;em&gt;myblog&lt;/em&gt; directory and make it executable.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl https://raw.githubusercontent.com/pradippatil/myblog/master/deploy.sh &amp;gt; deploy.sh &amp;amp;&amp;amp; chmod 755 deploy.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Edit &lt;em&gt;deploy.sh&lt;/em&gt; to replace username and email from below params with your username and email.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    git config user.name 
    git config user.email
    git remote add upstream 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a GitHub personal access token for Drone.io to push our static blog to &lt;em&gt;username.github.io&lt;/em&gt; repository.
Use &lt;a href=&#34;https://github.com/settings/tokens/new&#34;&gt;this url&lt;/a&gt; and choose &lt;em&gt;public_repo&lt;/em&gt; as scope.
Copy and Paste generated token for use in next step.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Configure build on Drone.io&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Register on &lt;a href=&#34;https://drone.io/&#34;&gt;Drone.io&lt;/a&gt; using GitHub account.&lt;/li&gt;
&lt;li&gt;After successful registration. Select &lt;em&gt;New Project&lt;/em&gt; -&amp;gt; &lt;em&gt;GitHub&lt;/em&gt; -&amp;gt; It&amp;rsquo;ll list all repositories, including our new &lt;em&gt;myblog&lt;/em&gt; -&amp;gt;
Select &lt;em&gt;myblog&lt;/em&gt; -&amp;gt; Select &lt;em&gt;Go&lt;/em&gt; -&amp;gt; write &lt;em&gt;./deploy.sh&lt;/em&gt; in build script window -&amp;gt; write GH_TOKEN=&amp;lt;&lt;em&gt;paste here token generated in previous stage&lt;/em&gt;&amp;gt; in &lt;em&gt;Environment Variables&lt;/em&gt; section &amp;ndash;&amp;gt; Click on &lt;em&gt;Save&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Done!
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Submit all changes to &lt;em&gt;myblog&lt;/em&gt; repository.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As soon as you push the changes in &lt;em&gt;myblog&lt;/em&gt; repo, Drone.io will start to build using &lt;em&gt;deploy.sh&lt;/em&gt; and after successful build,
it will push &lt;em&gt;public&lt;/em&gt; directory to &lt;em&gt;username.github.io&lt;/em&gt; repository. That&amp;rsquo;s it! You can access your blog at &lt;a href=&#34;https://username.github.io&#34;&gt;https://username.github.io&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Yay! We&amp;rsquo;ve just created a version controlled blog with automated deployment.
Let me know how does it work for you in comments.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt; You can check source for this blog &lt;a href=&#34;https://github.com/pradippatil/myblog&#34;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>